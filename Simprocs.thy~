theory Simprocs
 imports Main
begin

ML \<open>
val pretty_term = Syntax.pretty_term
val pwriteln = Pretty.writeln

fun pretty_cterm ctxt ctrm = 
 pretty_term ctxt (Thm.term_of ctrm)

fun fail_simproc ctxt redex = 
let 
  val _ = pwriteln (Pretty.block [Pretty.str "The redex: ", pretty_cterm ctxt redex])
in 
  NONE
end
\<close>

simproc_setup fail ("Suc n") = \<open>K fail_simproc\<close>

lemma 
  shows "Suc 0 = 1" 
  apply(simp)
  oops

lemma plus_one:
  shows "Suc n \<equiv> n + 1" by simp

ML \<open>
fun plus_one_simproc _ _ redex = 
  case Thm.term_of redex of
    @{term "Suc 0"} => NONE
  | _ => SOME @{thm plus_one}

val plus_one =
 Simplifier.make_simproc @{context} "sproc +1" {lhss = [@{term "Suc n"}], proc = plus_one_simproc}
\<close>

lemma 
  shows "P (Suc (Suc (Suc 0))) (Suc 0)"
  apply(tactic \<open>simp_tac (put_simpset HOL_basic_ss @{context} addsimprocs [plus_one]) 1\<close>)
  oops

text \<open>Simproc for Suc -> n+1\<close>


text \<open>
  When seeing a pattern Suc t add 1 to the number t
\<close>

ML \<open>
fun dest_suc_trm (Const (@{const_name "Suc"}, _) $ t) = 1 + dest_suc_trm t
  | dest_suc_trm t = snd (HOLogic.dest_number t) ;

dest_suc_trm @{term "Suc 1"} ;

fun get_thm ctxt (t,n) = 
let
 val num = HOLogic.mk_number @{typ "nat"} n
 val goal = Logic.mk_equals (t, num)
in 
 Goal.prove ctxt [] [] goal (K (Arith_Data.arith_tac ctxt 1))
end ;

get_thm @{context} (@{term "Suc 0"},1) ;

fun get_thm_alt ctxt (t,n) = 
let
 val num = HOLogic.mk_number @{typ "nat"} n
 val goal = Logic.mk_equals (t, num)
 val num_ss = put_simpset HOL_ss ctxt addsimps @{thms semiring_norm}
in 
 Goal.prove ctxt [] [] goal (K (simp_tac num_ss 1))
end ;

get_thm @{context} (@{term "Suc 1"},2) ;

fun nat_number_simproc _  ctxt ct = 
 SOME (get_thm_alt ctxt (Thm.term_of ct, dest_suc_trm (Thm.term_of ct)))
 handle TERM _ => NONE ;

nat_number_simproc K @{context} @{cterm " 1 :: nat"} ;

val nat_number = 
 Simplifier.make_simproc @{context} "nat_number" {lhss = [@{term "Suc n"}], proc = nat_number_simproc} ;
\<close>

lemma 
  shows "P (Suc (Suc 2)) (Suc 99) (0 :: nat) (Suc 4 + Suc 0) (Suc (0 + 0))"
  apply(tactic \<open>simp_tac (put_simpset HOL_ss @{context} addsimprocs [nat_number]) 1\<close>)
  oops


ML \<open>
fun dest_sum term =
  case term of
    (@{term "(+):: nat \<Rightarrow> nat \<Rightarrow> nat"} $ t1 $ t2) =>
      (snd (HOLogic.dest_number t1),snd (HOLogic.dest_number t2))
  | _ => raise TERM ("dest_sum", [term]) ;

fun get_sum_thm ctxt t (n1, n2) =
let
 val sum = HOLogic.mk_number @{typ "nat"} (n1 + n2)
 val goal = Logic.mk_equals (t, sum)
in
 Goal.prove ctxt [] [] goal (K (Arith_Data.arith_tac ctxt 1))
end ;

get_sum_thm @{context} @{term "1+2::nat"} (1,2);


fun add_sp_aux ctxt t =
let
 val t' = Thm.term_of t
in
 SOME (get_sum_thm ctxt t' (dest_sum t'))
 handle TERM _ => NONE
end 
\<close>

simproc_setup add_sp ("t1+t2") = \<open>K add_sp_aux\<close>

lemma 
  shows "P (Suc (Suc 2)) (Suc 99) (0 :: nat) (Suc 4 + Suc 0) (Suc (0 + 0))"
  apply(tactic \<open>simp_tac (put_simpset HOL_ss @{context} addsimprocs [nat_number]) 1\<close>)
  apply(tactic \<open>simp_tac (put_simpset HOL_basic_ss @{context} addsimprocs [@{simproc add_sp}]) 1\<close>)
  apply(tactic \<open>simp_tac (put_simpset HOL_ss @{context} addsimprocs [nat_number]) 1\<close>)
  oops



lemma 






end